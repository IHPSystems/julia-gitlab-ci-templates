variables:
  JULIA_DEPOT_PATH: "$CI_PROJECT_DIR/.julia/"
  CI_JULIA_PROJECT_PATH: "."

.gitlab.redirect_git_for_ci_server_host:
  before_script:
    - echo -e "[url \"https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/\"]\n\tinsteadOf = git@${CI_SERVER_HOST}:" >> ~/.gitconfig
    - echo -e "[url \"https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/\"]\n\tinsteadOf = https://${CI_SERVER_HOST}/" >> ~/.gitconfig

.julia.setup:
  variables:
    CI_JULIA_VERSION: 1
  extends:
    - .gitlab.redirect_git_for_ci_server_host
  image: julia:$CI_JULIA_VERSION

.julia.version:
  script:
    - julia --version

.julia.cache: &julia_cache_template
  cache:
    key: $CI_COMMIT_REF_SLUG-julia
    paths:
     - .julia/artifacts/
     - .julia/packages/
     - .julia/registries/

.julia.build:
  stage: build
  script:
    - !reference [.julia.version, script]
    - cd $CI_JULIA_PROJECT_PATH
    - julia --project -e 'using Pkg; Pkg.build()'
  <<: *julia_cache_template

.julia.format:
  stage: test
  script:
    - !reference [.julia.version, script]
    - export TMP_JULIA_DEPOT_PATH=`mktemp -u`
    - "[[ -d $JULIA_DEPOT_PATH ]] && mv $JULIA_DEPOT_PATH $TMP_JULIA_DEPOT_PATH"
    - |
      JULIA_DEPOT_PATH=$TMP_JULIA_DEPOT_PATH julia --eval '
        using Pkg
        Pkg.add("JuliaFormatter")
        using JuliaFormatter
        @info "Verifying formatting of $(ENV["CI_JULIA_PROJECT_PATH"])"
        properly_formatted = format(ENV["CI_JULIA_PROJECT_PATH"]; verbose = true)
        if properly_formatted
          @info "Formatting verified."
        else
          @warn "Formatting verification failed: Some files are not properly formatted!"
        end
        exit(properly_formatted ? 0 : 1)
      '
    - "[[ -d $TMP_JULIA_DEPOT_PATH ]] && mv $TMP_JULIA_DEPOT_PATH $JULIA_DEPOT_PATH"
  <<: *julia_cache_template

.julia.jet:
  variables:
    CI_JULIA_JET_ANALYZER: JET.JETAnalyzer # e.g. JET.JETAnalyzer, JET.OptAnalyzer or other subtype of JET.AbstractAnalyzer
    CI_JULIA_JET_MODE: basic # e.g. basic, sound, typo - cf. https://aviatesk.github.io/JET.jl/dev/jetanalysis/#JET.JETAnalyzer
    CI_JULIA_JET_TARGET_DEFINED_MODULES: 'false' # Cf. https://aviatesk.github.io/JET.jl/dev/config/#toplevel-config

.julia.jet_report_file:
  extends:
    - .julia.jet
  stage: test
  script:
    - !reference [.julia.version, script]
    - cd $CI_JULIA_PROJECT_PATH
    - |
      julia --project --eval '
        using Pkg
        Pkg.activate()
        Pkg.add("JET")
        Pkg.activate(".")
        Pkg.instantiate()
        using JET
        analysis_target = ENV["CI_JULIA_JET_FILE_PATH"]
        analyzer = eval(Meta.parse(ENV["CI_JULIA_JET_ANALYZER"]))
        mode = Symbol(ENV["CI_JULIA_JET_MODE"])
        target_defined_modules = parse(Bool, ENV["CI_JULIA_JET_TARGET_DEFINED_MODULES"])
        @info "Analyzing $analysis_target using $analyzer with mode $mode$(!target_defined_modules ? "" : ", and target_defined_modules")"
        result = report_file(analysis_target; analyzer, mode, target_defined_modules)
        errors_found = !isempty(JET.get_reports(result))
        if errors_found
          @warn "Analysis completed with errors:"
        else
          @info "Analysis completed."
        end
        print(result)
        exit(!errors_found ? 0 : 1)
      '
  variables:
    CI_JULIA_JET_FILE_PATH: test/runtests.jl
  <<: *julia_cache_template

.julia.jet_report_package:
  extends:
    - .julia.jet
  stage: test
  script:
    - !reference [.julia.version, script]
    - cd $CI_JULIA_PROJECT_PATH
    - |
      julia --project --eval '
        using Pkg
        Pkg.activate()
        Pkg.add("JET")
        Pkg.activate(".")
        Pkg.instantiate()
        using JET
        analysis_target = Pkg.project().name
        analyzer = eval(Meta.parse(ENV["CI_JULIA_JET_ANALYZER"]))
        mode = Symbol(ENV["CI_JULIA_JET_MODE"])
        target_defined_modules = parse(Bool, ENV["CI_JULIA_JET_TARGET_DEFINED_MODULES"])
        @info "Analyzing $analysis_target using $analyzer with mode $mode$(!target_defined_modules ? "" : ", and target_defined_modules")"
        result = report_package(analysis_target; analyzer, mode, target_defined_modules)
        errors_found = !isempty(JET.get_reports(result))
        if errors_found
          @warn "Analysis completed with errors:"
        else
          @info "Analysis completed."
        end
        print(result)
        exit(!errors_found ? 0 : 1)
      '
  <<: *julia_cache_template

.julia.test:
  stage: test
  variables:
    CI_JULIA_TEST_REPORTS: REPORTS_ON
    CI_JULIA_TEST_THREADS: THREADS_ON
  script:
    - !reference [.julia.version, script]
    - cd $CI_JULIA_PROJECT_PATH
    - |
      julia --project -e '
        @info """
          Testing...
          CI_JULIA_TEST_THREADS: $(ENV["CI_JULIA_TEST_THREADS"])
          CI_JULIA_TEST_REPORTS: $(ENV["CI_JULIA_TEST_REPORTS"])
          Sys.CPU_THREADS: $(Sys.CPU_THREADS)
        """
        using_test_reports = ENV["CI_JULIA_TEST_REPORTS"] == "REPORTS_ON"
        using_threads = ENV["CI_JULIA_TEST_THREADS"] == "THREADS_ON"
        if using_test_reports && VERSION.major == 1 && VERSION.minor == 1
          @info "Not using TestReports on Julia v1.1"
          using_test_reports = false
        end
        using Pkg
        Pkg.instantiate()
        if using_test_reports
          Pkg.activate()
          Pkg.add("TestReports")
          Pkg.activate(".")
          using TestReports
        end
        if !using_threads || VERSION < v"1.5"
          if using_threads
            ENV["JULIA_NUM_THREADS"] = Sys.CPU_THREADS
          end
          if !using_test_reports
            Pkg.test(; coverage = true)
          else
            TestReports.test(; coverage = true)
          end
        else
          if !using_test_reports
            Pkg.test(; coverage = true, julia_args = ["--threads=auto"])
          else
            TestReports.test(; coverage = true, julia_args = ["--threads=auto"])
          end
        end
      '
    - |
      julia -e '
        using Pkg
        Pkg.add("Coverage")
        using Coverage
        cl, tl = get_summary(process_folder())
        @info "($(cl/tl*100)%) covered"
      '
  coverage: '/\(\d+.\d+%\) covered/'
  <<: *julia_cache_template
  artifacts:
    when: always
    reports:
      junit: '**/testlog.xml'
